{"type":"published","id":"re-formality","name":"re-formality","version":"0.0.3","description":"Reasonable form validation tool for reason-react","author":"Alex Fedoseev","license":"MIT","keywords":["reason-react","react","ocaml","bucklescript","reason"],"body":"# Formality\n\nReasonable form validation tool for [`reason-react`](https://reasonml.github.io/reason-react/).\n\n## Why\n\nThe main goal of the library is to simplify an implementation of forms validation preserving an excellent UX. It offers set of predefined strategies to handle different kinds of validation flows.\n\n## Examples\n\n* Signup form [ [live](https://formality.now.sh) &middot; [source](examples/SignupForm.re) ]\n\n## ðŸš§ WIP ðŸš§\n\n* [x] Base API\n* [x] Validation strategies\n* [x] Dependant fields validation\n* [ ] Async validations\n* [ ] Convert [test suit](https://github.com/shakacode/react-validation-layer/tree/master/__tests__)\n\n## Installation\n\n```shell\n# yarn / npm\nyarn add re-formality\nnpm install --save re-formality\n```\n\n## Usage\n\nDocs are WIP. Here's the quick example. See [`examples`](examples/) for real-world cases.\n\n> Also, you can read more on `strategies` [here](https://github.com/shakacode/react-validation-layer#propsstrategy)\n\n```reason\nmodule MyForm = {\n  type field =\n    | Email\n    | Password;\n  type state = {\n    email: string,\n    password: string\n  };\n  let update = ((field, value), state) =>\n    switch (field, value) {\n    | (Email, value) => {...state, email: value}\n    | (Password, value) => {...state, password: value}\n    };\n  let strategy = Formality.Strategy.OnFirstSuccessOrFirstBlur;\n  module Validators = Formality.MakeValidators({type t = field;});\n  type validators = Validators.t(Formality.validator(field, state));\n  let validators = Formality.(\n    Validators.empty\n    |> Validators.add(Email, {\n         strategy: None, /* None means global strategy will be used, you can override it w/ Some(Formality.Strategy.t) */\n         dependents: None, /* You can define fields which must be revalidated on change of this field's value */\n         validate: (value, state) => {\n           switch (value |> Js.Option.getWithDefault(state.email)) {\n           | \"\" => Valid(false)\n           | _ => Valid(true)\n           }\n         }\n       })\n    |> Validators.add(Password, {\n         strategy: None, /* None means global strategy will be used, you can override it w/ Some(Formality.Strategy.t) */\n         dependents: None, /* You can define fields which must be revalidated on change of this field's value */\n         validate: (value, state) => {\n           switch (value |> Js.Option.getWithDefault(state.password)) {\n           | \"\" => Valid(false)\n           | _ => Valid(true)\n           }\n         }\n       })\n    );\n};\n\nmodule Container = Formality.Make(MyForm);\n\nlet component = ReasonReact.statelessComponent(\"MyForm\");\n\nlet make = (_) => {\n  ...component,\n  render: (_) =>\n    <Container\n      initialState={email: \"\", password: \"\"}\n      onSubmit=((~notifyOnSuccess, ~notifyOnFailure, state) => {/* Submit form... */})>\n      ...(\n           ({state, results, update, blur, submit, submitting}) =>\n             <form className=\"form\" onSubmit=submit>\n               <input\n                 value=state.email\n                 disabled=(submitting |> Js.Boolean.to_js_boolean)\n                 onChange=(update(MyForm.Email))\n                 onBlur=(blur(MyForm.Email))\n               />\n               (\n                 switch (MyForm.Email |> results) {\n                 | Some(Formality.Valid(valid)) =>\n                   <div className=(Cn.make([\"form-message\", valid ? \"success\" : \"failure\"]))>\n                     ((valid ? \"Nice!\" : \"Uh oh error\") |> ReasonReact.stringToElement)\n                   </div>\n                 | None => ReasonReact.nullElement\n                 }\n               )\n               <input\n                 value=state.password\n                 disabled=(submitting |> Js.Boolean.to_js_boolean)\n                 onChange=(update(MyForm.Password))\n                 onBlur=(blur(MyForm.Password))\n               />\n               (\n                 switch (MyForm.Password |> results) {\n                 | Some(Formality.Valid(valid)) =>\n                   <div className=(Cn.make([\"form-message\", valid ? \"success\" : \"failure\"]))>\n                     ((valid ? \"Nice!\" : \"Uh oh error\") |> ReasonReact.stringToElement)\n                   </div>\n                 | None => ReasonReact.nullElement\n                 }\n               )\n               <button disabled=(submitting |> Js.Boolean.to_js_boolean)>\n                 ((submitting ? \"Submitting...\" : \"Submit\") |> ReasonReact.stringToElement)\n               </button>\n             </form>\n         )\n    </Container>\n};\n```","analyzed":"2017-12-22T22:01:18.479Z","updated":"2017-12-22T22:01:18.479Z","stars":2,"score":0.4879410699803369,"quality":0.43004566138517225,"popularity":0.03118269421851564,"maintenance":0.9943240816808707,"homepageUrl":"https://github.com/alexfedoseev/re-formality#readme","repositoryUrl":"https://github.com/alexfedoseev/re-formality","npmUrl":"https://www.npmjs.com/package/re-formality","issuesUrl":"https://github.com/alexfedoseev/re-formality/issues","docsUrl":null}