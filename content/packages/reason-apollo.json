{"type":"published","id":"reason-apollo","name":"reason-apollo","version":"0.5.7","description":"Using Apollo client 2 with Reason","author":"GrÃ©goire Van der Auwermeulen","license":"MIT","keywords":["react","graphql","reason","apollo"],"body":"# Reason-apollo\n\n[![npm version](https://badge.fury.io/js/reason-apollo.svg)](https://badge.fury.io/js/reason-apollo)\n[![Get on Slack](https://img.shields.io/badge/slack-join-orange.svg)](http://www.apollostack.com/#slack)\n\nEasily use the Apollo Client 2 with Reason\n\n## Install and setup\n\n#### yarn\n```\nyarn add reason-apollo\n```\n\n#### bsconfig\nAdd `reason-apollo` to your `bs-dependencies`:\n**bsconfig.json**\n```\n\"bs-dependencies\": [\n  \"reason-react\",\n  \"reason-apollo\"\n]\n```\n\n\n## Usage \n \n [here](https://github.com/Gregoirevda/reason-apollo-test-usage) is a repository showing the usage of the package.\n \n \n ### Create the Apollo Client\n \n **Apollo.re**\n ```reason\n module Client = ReasonApollo.Create({ let uri = \"http://localhost:3010/graphql\" });\n\n ```\n  \n  ## Query\n  \n  ### Query Configuration\n  **QueryConfig.re**\n  ```reason\n  /* Create a query with the `graphql-tag` */\n  \n  let query = [@bs] gql({|\n    query getUser {\n      name\n    }\n  |});  \n  \n  /* Describe the result type */\n    type user = {. \"name\": string};\n    type data = {. \"user\": user};\n    type response = data;\n    \n  /* Optional variables passed to the query */\n    type variables = {. \"limit\": int}; /* or `type variables;` if none */\n  ```\n\n  \n  #### Executing the Query\n  **YourQuery.re**\n  ```reason\n  module FetchUserName = Apollo.Client.Query(QueryConfig);\n  \n  let variables = {\n    \"limit\": 2\n  };\n  \n  let make = (_children) => {\n  /* ... */\n  render: (_) =>\n    <FetchUserName variables>\n      (response => {\n        switch response {\n           | Loading => <div> (Utils.ste(\"Loading\")) </div>\n           | Failed(error) => <div> (Utils.ste(error)) </div>\n           | Loaded(result) => <div> (Utils.ste(result##user##name)) </div>\n      })\n    </FetchUserName>\n  }\n  ```\n\n  ## Mutation\n  \n  ### Mutation Configuration\n  \n  **MutationConfig.re**\n  ```reason\n  /* Create a mutation with the `graphql-tag` */\n  \n  let mutation = [@bs] gql({|\n    mutation deleteTodo($id: ID!) {\n        deleteTodo(id: $id) {\n          id\n          name\n        }\n      }\n  |});  \n  \n  /* Describe the result type */\n  type todo = {. \"name\": string, \"id\": string};\n  type data = {. \"deleteTodo\": todo};\n  type response = data;\n    \n  /* Optional variables passed to the mutation */\n    type variables = {. \"id\": string}; /* or `type variables;` if none */\n  ```\n\n  \n  ### Executing the Mutation\n  **YourMutation.re**\n  ```reason\n  module DeleteTodo = Apollo.Client.Mutation(MutationConfig);\n  \n  let variables = {\n    \"id\": \"uuid-1\"\n  };\n  \n  let make = (_children) => {\n  /* ... */\n  render: (_) =>\n    <DeleteTodo>\n      ((\n        deleteTodo /* Mutation to call */, \n        result /* Result of your mutation */\n      ) => {\n          let mutationResponse = switch result {\n            | NotCalled => <div>  (Utils.ste(\"Not Called\")) </div>\n            | Loading => <div> (Utils.ste(\"Loading\")) </div>\n            | Loaded(response) => <div> (Utils.ste(response##deleteTodo##name ++ \" deleted\")) </div>\n            | Failed(error) => <div> (Utils.ste(error)) </div>\n          };\n        <div>\n          <button onClick=((_mouseEvent) => deleteTodo(~variables, ()))> \n            (Utils.ste(\"Delete Todo\")) \n          </button>\n          <div> (mutationResponse) </div>\n        </div>\n      })\n    </DeleteTodo>\n  }\n  ```","analyzed":"2017-12-19T22:45:06.498Z","updated":"2017-12-19T22:45:06.498Z","stars":48,"score":0.5087903396211474,"quality":0.41167083833848434,"popularity":0.10082596605600598,"maintenance":1,"homepageUrl":"https://github.com/apollographql/reason-apollo#readme","repositoryUrl":"https://github.com/apollographql/reason-apollo","npmUrl":"https://www.npmjs.com/package/reason-apollo","issuesUrl":"https://github.com/apollographql/reason-apollo/issues","docsUrl":null}