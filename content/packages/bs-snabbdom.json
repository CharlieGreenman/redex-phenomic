{"type":"published","id":"bs-snabbdom","name":"bs-snabbdom","version":"0.4.2","description":"Bucklescript bindings to Snabbdom","author":"Jordan West","license":"MIT","keywords":[],"body":"Bucklescript + Snabbdom\n=======================\n\nThese are *experimental and incomplete* bindings to [Snabbdom](https://github.com/snabbdom/snabbdom) for [Bucklescript](http://bucklescript.github.io/bucklescript/).\n\n[API Documentation](https://jordwest.github.io/bs-snabbdom/)\n\n## Why\n\n[Snabbdom](https://github.com/snabbdom/snabbdom) is a small, fast, functional and extensible virtual DOM library that meshes really well with OCaml. Using something like Snabbdom in OCaml can bring you the best parts of languages like Elm plus a tiny bundle size, without a complete architectural overhaul.\n\nIf you're already working on a Snabbdom project in JavaScript, you can use these bindings to introduce OCaml for safer types and less runtime errors. Snabbdom components are just functions which return vnodes, so they're totally interchangeable between JavaScript and Bucklescript.\n\nThis project was inspired by [bucklescript-tea](https://github.com/OvermindDL1/bucklescript-tea), which provides an almost drop-in replacement of Elm for Bucklescript. I wanted something that provided a functional, type-safe declarative UI language, without adopting the entire Elm architecture. In contrast to Elm and bucklescript-tea, Snabbdom (and `bs-snabbdom`) does not provide a data model so you'll need to bring your own.\n\n## Introduction\n\nThis project adds basic OCaml bindings for Snabbdom functions, as well as an OCaml friendly replacement `h` function for constructing virtual dom nodes.\n\nIn JavaScript, you might write something like the following:\n\n```js\nvar click_handler = function(e) {\n    console.log('Clicked!', e);\n}\n\nvar vnode = h('ul.my-list', {style: {'list-style': 'none'}}, [\n    h('li', {on: {click: click_handler}}, 'First item')]),\n    h('li', 'Second item'),\n]);\n```\n\nIn OCaml with bs-snabbdom, the equivalent is:\n\n```ocaml\nlet click_handler e =\n    Js.log2 \"Clicked!\" e\nin\n\nlet vnode = h \"ul.my-list\" [style \"list-style\" \"none\"; children [\n    h \"li\" [click click_handler; text \"First item\";]\n    h \"li\" [text \"Second item\"];\n]]\n```\n\nThe main difference when compared to JavaScript is that the `h` function here always takes two arguments:\n\n```ocaml\nh : string -> vnode_transformer list -> vnode\n```\n\nThe first parameter - the element selector (eg: `\"ul.my-list\"`) - remains the same.\n\nThe second parameter takes a list of transformer functions. These transformers describe how to alter the vnode - whether that's setting a property on the `data` object, adding children, or setting the node's text.\n\n## Getting started\n\n### Install Bucklescript\n\nIf you're starting from scratch, or adding bucklescript to an existing JavaScript project, you'll first need to install the Bucklescript compiler:\n\n```sh\nnpm install bs-platform\n./node_modules/.bin/bsb -init .\n```\n\nSee the [Bucklescript docs](http://bucklescript.github.io/bucklescript/) for more details.\n\n### Install `bs-snabbdom` and `snabbdom`\n\n1. Install with your package manager of choice:\n```sh\nnpm install snabbdom bs-snabbdom\n```\n2. Let the Bucklescript compiler know about bs-snabbdom. Add the dependency to `bsconfig.json` in your project directory:\n\n```js\n{\n    /* ... */\n    \"bs-dependencies\" : [\"bs-snabbdom\"],\n    /* ... */\n}\n```\n\n### Write some code\n\n```ocaml\nopen Snabbdom.Base\n\n(* Define a function that returns a new virtual dom node *)\nlet view title =\n  h \"div\" [\n    style \"box-shadow\" \"0px 0px 10px black\";\n    children [\n      h \"h1\" [text (\"Hello, \" ^ title ^ \"!\")];\n      h \"ol\" [children [\n        h \"li\" [text \"Item 1\"];\n        h \"li\" [text \"Item 2\"];\n        h \"li\" [text \"Item 3\"];\n      ]]\n    ]\n  ]\n\n(* Create a patch function from an array of Snabbdom modules *)\nlet patch = init [|module_style|]\n\n(* Patch a dom element with id \"#app\" to the new virtual dom node *)\nlet () = patch (VNode.from_dom_id \"app\") (view \"Snabbdom\")\n```","analyzed":"2017-12-11T00:46:21.942Z","updated":"2017-12-11T00:46:21.942Z","score":0.2575185667115005,"quality":0.4552935933164038,"popularity":0.012182348714036322,"maintenance":0.3333333333333333,"npmUrl":"https://www.npmjs.com/package/bs-snabbdom","docsUrl":null}