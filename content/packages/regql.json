{"type":"published","id":"regql","name":"regql","version":"0.3.1","description":"reason graphql","author":"Kennet Postigo","license":"MIT","keywords":[],"body":"# Regql\n\n[![version](https://img.shields.io/npm/v/regql.svg?style=flat-square)](http://npm.im/regql)\n[![MIT License](https://img.shields.io/npm/l/regql.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\nGraphQL Client in Pure [ReasonML](https://reasonml.github.io). Stupid simple,\nmagic-free client backed by plain-old fetch. Inspired by\n[reason-apollo](https://github.com/Gregoirevda/reason-apollo).\n\n## RoadMap\n\nIn the near future these are the planned additional features:\n\n* [ ] integration with [graphql_ppx](https://github.com/mhallin/graphql_ppx)\n* [ ] Cache queries/requests\n* [ ] Optimistic Updates\n\n## Install\n\n```bash\nyarn add regql\n```\n\n## bsconfig\n\n```json\n\"bs-dependencies\": [\n  \"reason-react\",\n  \"bs-fetch\",\n  \"bs-json\",\n  \"regql\"\n]\n```\n\n## Usage\n\n#### Instantiate the client and pass it configuration:\n\n```reason\n// Gql.re\nmodule Client = Regql.Create({\n  let uri = \"http://localhost:8000/graphql\"\n});\n```\n\n#### Create a query\n\n```reason\nlet query = {|\n    query getUser {\n      name\n    }\n  |};\n```\n\n#### Define the response shape\n\n```reason\ntype user = {name: string};\ntype data = {user: user};\n```\n\n#### Define Decoder for your response\n\n```reason\nlet user = (json) =>\n  Json.Decode.{\n    name: json |> field(\"name\", string),\n  };\n\nlet data = (json) =>\n  Json.Decode.{\n    user: json |> field(\"user\", user)\n  };\n```\n\n#### Define Container configuration\n\n```reason\nmodule Container = {\n  type shape = data;\n  type variables; /* or some type `type variables = {\"one\": 1};` if used */\n  let decoder = data;\n};\n```\n\n### Pass Container configuration to Gql.Client\n\n```reason\nmodule FetchUserName = Gql.Client(Container);\n```\n\n### Use the FetchUserName Component\n\n```reason\nrender: (_) =>\n<FetchUserName query>\n  ((response) => {\n    switch response {\n       | Loading => <div> (ReasonReact.stringToElement(\"Loading\")) </div>\n       | Failed(error) => <div> (ReasonReact.stringToElement(error)) </div>\n       | Loaded(result) =><div> (ReasonReact.stringToElement(result.user.name)) </div>\n  })\n</FetchUserName>\n```","analyzed":"2017-12-21T23:14:37.677Z","updated":"2017-12-21T23:14:37.677Z","stars":11,"score":0.520511987579923,"quality":0.5063960782201744,"popularity":0.05364275519063419,"maintenance":0.9994805708489964,"homepageUrl":"https://github.com/kennetpostigo/regql#readme","repositoryUrl":"https://github.com/kennetpostigo/regql","npmUrl":"https://www.npmjs.com/package/regql","issuesUrl":"https://github.com/kennetpostigo/regql/issues","docsUrl":null}