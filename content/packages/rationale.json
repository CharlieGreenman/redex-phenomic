{"type":"published","id":"rationale","name":"rationale","version":"0.1.3","description":"Rationale is a collection of helper utility functions that are absent in the OCaml/ReasonML standard library.","license":"MIT","keywords":["lodash","ramda","bucklescript","monad","reason"],"body":"Rationale\n================================================================================\n\nRationale is inspired by [RamdaJS](http://ramdajs.com/). It is a collection of helper utility functions that are absent in the OCaml/ReasonML standard library.\n\nNote that not all of Ramda was ported over, as many of Ramda's utilities are making up for deficits in Javascript, which Reason doesn't have. Furthermore, many of the functions that operate on objects, simply don't make sense in Reason.\n\nFeatures\n--------------------------------------------------------------------------------\n\n### Exception-free List operations\n\nIn the OCaml/ReasonML standard library, many of the common List operations throw exceptions if there's a problem. Rationale's utilities do not throw exceptions, and instead return `options`.\n\n- head\n- tail\n- init\n- last\n- nth\n- etc\n\n### Monadic Options and Js.Results\n\nRationale includes monadic and functor operations ala Haskell for the `option` and `Js.Result` types.\n\n```Reason\nopen Rationale.Option.Infix;\nopen Rationale.Function;\n\nRList.init(a)\n  >>= ((x) => RList.last(a) <$> f <$> flip(RList.append, x))\n  <$> RList.concat(b)\n  |> Option.default(xs);\n```\n\n### Support for Point-free style\n\nRationale has `compose` and `pipe` functions, as well as supporting infix operators: `<||` and `||>` respectively.\n\n### Infix Lens composition\n\nRationale also allows for fluid lens composition via infix operators: `-<<` and `>>-`.\n\n```Reason\nLens.view(aLens >>- bLens >>- optional(0), { a: { b: Some(3) } });\n\n```\n\n### Function signatures for composition\n\nLike in Ramda, functions always keep their data at the end making piping and composing a breeze:\n\n```Reason\nlist\n  |> take(9)\n  |> drop(3)\n  |> splitAt(4);\n```\n\nUsage\n--------------------------------------------------------------------------------\n\n### Using Optional Returns in RList and Dict\n\nReturning `option('a)` from functions is generally preferred to throwing an exception.\nIt protects you from runtime errors, and forces you to deal with potential errors at\ncompile time. However, if you're not used to doing it, things can get a little\nconfusing.\n\nPattern matching for errors all the time would be extremely cumbersome. Fortunately,\nwe provide a host of useful methods to working with optional returns. Hopefully,\nthis doc will show you that you don't need to use excessive pattern matching to\nwork with optional returns.\n\n#### Default\n\nThe most straight forward way to get out of an `option` is by calling `default`.\n\n```Reason\nOption.default(0, Some(1)); /* 1 */\n\nOption.default(0, None); /* 0 */\n```\n\n#### Monads\n\nCalling `default` will definitely get you out of the `option`, but what if you want\nto do some things to it first? What if you need other funtions that also return `option`?\n\nthe Option module includes monadic operations for `option`, so you can take a *railway oriented*\napproach to working with them.\n\nFirst, let's check if the last item of a list is equal to a certain value:\n\n```Reason\nlet lastEquals = (a, xs) => Option.fmap(Util.eq(a), RList.last(xs)) |> Option.default(false);\n\nlastEquals(3, [1,2,3]); /* true */\nlastEquals(3, [4,5,6]); /* false */\nlastEquals(3, []); /* false */\n\n/* Or, with infix operators */\nopen Option.Infix;\n\nlet lastEquals = (a, xs) => RList.last(xs) <$> Util.eq(a) |> Option.default(false);\n```\n\nHere we used `fmap` and its infix variation `<$>` to apply a function to the value *inside* the option.\nNote that, `Util.eq` returns a `bool` not an `option`. So what if the next function also returns an\n`option`? Well you'd get nested options, which doesn't really help anyone. So, instead, we would\nuse `bind`.\n\nNow let's replace the last item of one list with the last item of another. Note that both `last` and\n`init` return `option`:\n\n```Reason\nlet swapLast = (xs, ys) =>\n  Option.(bind(RList.last(xs), ((x) => fmap(RList.append(x), RList.init(ys)))) |> default(ys));\n\nswapLast([1,2,3], [4,5,6]); /* [4,5,3] */\nswapLast([], [4,5,6]); /* [4,5,6] */\n\n/* Or, with infix operators */\nopen Option.Infix;\n\nlet swapLast = (xs, ys) =>\n  RList.last(xs) >>= ((x) => RList.init(ys) <$> RList.append(x)) |> Option.default(ys);\n```\n\nHere we used `bind` and its infix variation `>>=` to apply a function that also returned an `option`.\n\n#### Applicatives\n\nLet's try checking if the last elements of two lists are equal. We could accomplish this using `bind`,\nbut that can be a little awkward.\n\n```Reason\nlet lastEqual = (xs, ys) =>\n  Option.(apply(apply(Some(Util.eq), RList.last(xs), RList.last(ys))) |> default(false));\n\nlastEqual([1,2,3], [4,5,3]); /* true */\nlastEqual([1,2,3], [4,5,6]); /* false */\nlastEqual([], [4,5,6]); /* false */\nlastEqual([1,2,3], []); /* false */\n\n/* Or, with infix operators */\nopen Option.Infix;\n\nlet lastEqual = (xs, ys) =>\n  Some(Util.eq) <*> RList.last(xs) <*> RList.last(ys) |> Option.default(false);\n```\n\n### Translating JS Idioms\n\n#### Or chains\n\nTake the following example in Javascript:\n\n```Javascript\nlet x = a || b || c || d;\n```\n\nWe can't translate that directly to Reason, because there is no `null` or `undefined` in Reason.\nThe closest approximation would be `option`, in which we can string together `Some` and `None`\nto get the first one that is `Some`.\n\nThere is a helper function called `firstSome` and its infix variation `|?` that do exactly this.\n\n```Reason\n/* a, b, and c are all options, but d is not */\nlet x = a |? b |? c |> default(d);\n```\n\nReference\n--------------------------------------------------------------------------------\n\n### Infix Operators\n\n- `>>=`: Monadic Bind\n- `<$>`: Functor Fmap\n- `<*>`: Applicative Apply\n- `<||`: Point-free Function Compose\n- `||>`: Point-free Function Pipe\n- `-<<`: Lens Compose\n- `>>-`: Lens Pipe\n- `|?`: Optional Or","analyzed":"2017-12-22T17:38:28.649Z","updated":"2017-12-22T17:38:28.649Z","stars":32,"score":0.5785005873372709,"quality":0.7011076458988124,"popularity":0.05557291415779631,"maintenance":0.9963364960354244,"homepageUrl":"https://github.com/jonlaing/rationale#readme","repositoryUrl":"https://github.com/jonlaing/rationale","npmUrl":"https://www.npmjs.com/package/rationale","issuesUrl":"https://github.com/jonlaing/rationale/issues","docsUrl":null}