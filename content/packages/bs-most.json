{"type":"published","id":"bs-most","name":"bs-most","version":"0.1.1","description":"Reason/BuckleScript bindings for the Most.js reactive toolkit Edit","author":"lilactown","license":"MIT","keywords":["async","reactive","most","functional","streams","most.js","promise","ocaml","bucklescript","reason"],"body":"# bs-most\n\nBuckleScript bindings for [Most.js](https://github.com/cujojs/most).\n\nIn [Reason](https://reasonml.github.io/):\n```reason\nlet add x y => x + y;\nlet isEven x => x mod 2 === 0;\n\nMost.(\n  fromList [0,1,2,3,4,5,6,7,8]\n  |> map (add 2)\n  |> filter isEven\n  |> observe (fun x => Js.log x)\n  |> Js.Promise.then_ (fun _ => {\n    Js.log \"Stream completed\";\n    Js.Promise.resolve ()\n  })\n);\n\n/**\n * Logs:\n * 2\n * 4\n * 6\n * 8\n * 10\n * Stream completed\n **/\n```\n\n## How do I install it?\n\nInside of a BuckleScript project:\n\n```\nnpm install --save bs-most\n```\n\nThen add `bs-most` to your `bs-dependencies` in `bsconfig.json`:\n\n```\n{\n  ...\n  \"bs-dependencies\": [\n    \"bs-most\"\n  ]\n}\n```\n\n## How do I use it?\n\nThe Most.js [API docs](https://github.com/cujojs/most/blob/master/docs/api.md) are probably the best source of information about each method. This library attempts to provide very low-level bindings, except for what's noted in the **What's different** section.\n\nThe bindings are a single file in `src/most.re`. I try to provide comments next to each binding and am working on flushing out tests so that users can refer to them.\n\nI am also available by e-mail or DM on the Reason discord (username: @lilactown). \n\n## What's missing\n\n1. `generate` - Reason doesn't have generator support yet\n2. `transduce` - Awkward to use in Reason/OCaml without a solid transducer impl (maybe coming soon?? ðŸ˜‰)\n3. `combineArray` - the callback for this is variadic (depending on how many streams you have in the array), not sure how to type it yet ðŸ˜ž\n\n## What's different\n\n1. Predicates that normally return \"truthy\" values, now only accept returning booleans\n2. `sample` is variadic so we offer `sample1`, `sample2`, `sample3`... `sample6`\n3. `fromEvent` - DOM events are supported, but generic `EventEmitter`'s are not yet\n4. `from` only works on arrays right now; generic iterators must be coerced\n5. `fromList` is a function that creates a stream from a Reason `List` type, e.g. `fromList([1, 2, 3])`\n6. `unfold` is modeled a bit differently - instead of taking in a JS object `{ done, value, seed }`, it takes an `option (value, seed)`.\nExample:\n```reason\n/* emits 2,4,6 then completes */\nMost.unfold\n  (\n    fun seed =>\n      if (seed < 4) {\n        let nextSeed = seed + 1;\n        Some (seed * 2, nextSeed)\n      } else {\n        None\n      }\n  )\n  1;\n```\n\n# Subjects\n\nThis library also includes some bindings for [Subjects](https://github.com/mostjs-community/subject). Subjects are very useful for e.g. implementing a state store/dispatch system. The API is a little bit different from the raw `most-subject` library:\n\n- `Subject.make`: creates an [asynchronous Subject](https://github.com/mostjs-community/subject#asynct-subjectt)\n- `Subject.asStream`: casts a subject to a stream, to be used by the rest of the `Most` module\n- `Subject.next`: emits a value on a subject\n- `Subject.error`: emits an error on a subject\n- `Subject.complete`: completes a subject with no value\n- `Subject.completeWith`: completes a subject with a value\n\n## Build\n```\nnpm run build\n```\n\n## Build + Watch\n\n```\nnpm run watch\n```\n\n## Testing\n\n```\nnpm run test\n```","analyzed":"2017-12-23T01:13:56.379Z","updated":"2017-12-23T01:13:56.379Z","stars":16,"score":0.5717055078569131,"quality":0.693527602188663,"popularity":0.045503464430184826,"maintenance":0.9934886132849985,"homepageUrl":"https://github.com/Lokeh/bs-most#readme","repositoryUrl":"https://github.com/Lokeh/bs-most","npmUrl":"https://www.npmjs.com/package/bs-most","issuesUrl":"https://github.com/Lokeh/bs-most/issues","docsUrl":null}