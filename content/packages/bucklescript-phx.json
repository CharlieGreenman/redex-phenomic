{"type":"published","id":"bucklescript-phx","name":"bucklescript-phx","version":"0.1.3","description":"BuckleScript binding for Phoenix Channel/Presence to Phoenix's official JavaScript client","author":"JackalCooper","license":"LGPL-3.0","keywords":["tea","phoenix","ocaml","bucklescript"],"body":"# BuckleScript Phoenix\n[![NPM](https://nodei.co/npm/bucklescript-phx.png?compact=true)](https://nodei.co/npm/bucklescript-phx/)\n\n[![Build Status](https://travis-ci.org/phoenix-china/bucklescript-phx.svg?branch=master)](https://travis-ci.org/OvermindDL1/bucklescript-phx)\n#### BuckleScript binding for Phoenix Channel/Presence to Phoenix's official JavaScript client.\n#### This is usable now.\n#### Feel free to create PRs.\n\n- [X] Connect socket\n- [X] Join channel\n- [X] Push event\n- [X] Handle event\n- [X] Presence\n- [ ] Support The Elm Architecture on BuckleScript ([https://github.com/OvermindDL1/bucklescript-tea](BuckleScript-tea))\n- [ ] Fallback support for polling.\n\n#### To install\n```bash\nnpm install -save bucklescript-phx\n```\n\n#### Please update your `bsconfig.json` to make `bsb` aware of this dependency\n```\n\"bs-dependencies\": [\n    \"bucklescript-phx\"\n  ]\n```\n#### Notice:\n\n1. Please add official Phoenix client as your dependency to make sure BuckleScript is able to require Phoenix's js.\n\n2. Meta of Presence and payload of incoming event are decalred as `Js_json.t` which means you need to decode it with your prefered decoder (in TEA it is very convenient with `Json.Decoder.decodeValue`).\n\n3. The bindings are based on [https://github.com/DefinitelyTyped/DefinitelyTyped](DefinitelyTyped). There might be some error on mapping the types. Please help correct them if you find anything wrong. Thank you!\n\n#### Here are the examples:\n\nTo join a channel:\n```ocaml\nopen Phx\n\nlet handleReiceive event any =\n  match event with\n  | \"ok\" -> Js.log (\"handleReiceive:\" ^ event, \"Joined\")\n  | \"error\" -> Js.log (\"handleReiceive:\" ^ event, \"Failed to join channel\")\n  | _ -> Js.log (\"handleReiceive:\" ^ event, any)\n\nlet handleEvent event response =\n  let _ = Js.log (\"handleEvent:\" ^ event, response) in\n  ()\n\n\nlet handleSyncState response =\n  let _ = Js.log (\"handleSyncState\", response) in\n  (*let _ = Js.log (Array.iter (fun key -> Js.log (Js_dict.unsafeGet response key)) (Js_dict.keys response) ) in*)\n  let _presences  =  Presence.syncState (Js.Dict.empty ()) response in\n  ()\n\nlet handleSyncDiff diff =\n  let _ = Js.log (\"handleSyncDiff:diff\", diff) in\n  let presences  =  Presence.syncDiff (Js.Dict.empty ()) diff in\n  let _ = Js.log (\"handleSyncDiff:presences\", presences) in\n  ()\n\nlet _ =\n  let socket = initSocket \"/socket\"\n               |> connectSocket\n               |> putOnClose (fun () -> Js.log \"Socket closed\") in\n  let channel = socket\n                |> initChannel \"user:lobby\" in\n  let _ = channel\n          |> putOn \"from_server\" (handleEvent \"from:server\")\n          |> putOnSyncState handleSyncState\n          |> putOnsyncDiff handleSyncDiff\n          |> joinChannel\n          |> putReceive \"ok\" (handleReiceive \"ok\")\n          |> putReceive \"error\" (handleReiceive \"error\") in\n  push \"new:message\" [%bs.obj { user = \"Hello, Elixir! This is a greeting from BuckleScript!\"} ] channel\n```","analyzed":"2017-12-22T23:47:11.138Z","updated":"2017-12-22T23:47:11.138Z","stars":11,"score":0.4398146083905495,"quality":0.5063960782201744,"popularity":0.048345864869192616,"maintenance":0.7742135206293708,"homepageUrl":"https://github.com/phoenix-china/bucklescript-phx#readme","repositoryUrl":"https://github.com/phoenix-china/bucklescript-phx","npmUrl":"https://www.npmjs.com/package/bucklescript-phx","issuesUrl":"https://github.com/phoenix-china/bucklescript-phx/issues","docsUrl":null}