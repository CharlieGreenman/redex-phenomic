{"type":"published","id":"bs-little-parser","name":"bs-little-parser","version":"0.3.4","description":"Little parser combinator for BuckleScript or Reason.","author":"henoc","license":"MIT","keywords":["bucklescript","reason"],"body":"# bs-little-parser\n\nLittle parser combinator for BuckleScript or Reason.\n\n## Usage\n\n```ml\nopen BsLittleParser.Parser\n\nlet input = BsLittleParser.Input.{text = \"abcabc  abc\"; index = 0; whitespace = \" \"}\n\nlet abc = stringParser \"abc\"\n\nlet () =\n  input\n  |> rep abc\n  |> Js.log\n```\n\nType `Input.t` has a whitespace which specify a character sequence should be ignored.\n\n## Parsers\n\n| parser | description |\n|:-----|:------|\n| str s | expect string |\n| chr c | expect char |\n| regex r | expect regex |\n| p `<*>` q | execute q only if p succeeds |\n| p `<|>` q | execute q only if p fails |\n| p `<*` q | same with `<*>` but throw the result of q away |\n| p `*>` q | same with `<*>` but throw the result of p away |\n| p `>>` fnq | apply the result of p to fnq then execute the return parser |\n| p `^^` fn | apply the result of p to fn |\n| rep p | repeat p |\n| rep1 p | repeat p at least once |\n| opt p | execute p zero or once |\n| andPred p | execute p without consuming the input |\n| notPred p | succeeds only if p fails without consuming the input |\n\n## License\n\nMIT","analyzed":"2017-12-20T17:55:30.744Z","updated":"2017-12-20T17:55:30.744Z","stars":2,"score":0.5805662802940511,"quality":0.7011076458988124,"popularity":0.06343577343005206,"maintenance":0.9943756166396833,"homepageUrl":"https://github.com/Henoc/bs-little-parser#readme","repositoryUrl":"https://github.com/Henoc/bs-little-parser","npmUrl":"https://www.npmjs.com/package/bs-little-parser","issuesUrl":"https://github.com/Henoc/bs-little-parser/issues","docsUrl":null}